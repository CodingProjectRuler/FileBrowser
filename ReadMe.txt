一.display模块：
	fb.c通过系统调用获取LCD的相关参数，显示，清除LCD等基本操作
	1.初始化函数，打来设备文件，获取LCD参数，为LCD映射显存
	2.显示像素点函数，根据X,Y坐标和颜色值显示最基本的像素点
	3.清除屏幕，往显存里面写0即可
	以上的函数全部放在一个结构体里面，向display_manager注册
	所谓的注册就是放入链表
	

二.encoding模块：
	目录下的C文件主要获取文件的字符编码
	1.根据文件开始的编码标记字节判断文件的编码类型
	2.根据相应的编码特性获取每个字符的编码
	3.初始化函数：添加获取位图的方式，根据不同的编码来获取相应的位图
	添加和注册过程跟上述一样

三.font模块
	目录下的C文件主要根据编码获取位图
	1.相关的初始化函数，打开文件等
	2.根据编码获取对应的位图（字体显示数据）
	注册过程

相应的manager里面做一些注册和显示、获取对应的结构体操作，还有encoding中添加获取位图的方式，以及初始化函数来调用底层的初始化函数，向上提供抽象的接口。

四.draw模块
	主要实现打开文件（确认编码），选择获取位图方式，选择显示方式并初始化，显示一个字符，显示一页（判断是否超过（X,Y）边界），记录每页显示的记录在文件中的位置，显示上一页和显

示下一页。

五.main模块
	根据传入的参数，执行相应的显示文本文的操作。




获取文件中的编码—>根据编码找适合的获取位图数据的方式并获取数据—>在适当的位置显示出来




QWidget类是所有用户界面对象的基础类

这个widget是用户界面的不可分割的组成部分:从窗口系统中接受鼠标、键盘和其他的事件，在屏幕绘制显示自己的图像。每个widget都是一个矩形并且按照Z顺序排序。一个widget被自己的父组件和自己前面的组件所剪裁。

一个不被嵌入到父组件的widget叫做窗口。通常，窗口有一个frame区域和标题栏，也可以不采用这种装饰而使用合适的窗口标记来创建窗口。在Qt中，QMainWindow和QDialog的各种各样的子类是最常通用的窗口类型。

每个widget的构造函数接受一个或者两个标准的参数：
1、QWidget *parent = 0 是一个新widget的父widget。如果（默认为0）是0，这个新widget就是一个窗口，如果不是，它就是一个parent的孩子，并且受到父widget几何坐标的约束（除非使用Qt::Window指定为窗口标志）
2、Qt::WindowFlags f = 0(哪里可用)设置窗口标记，默认适用于多数窗口，但是例如需要得到一个没有窗口系统框架的窗口，你需要使用特别的标记。

QWidget有很多成员函数，但是其中一些没有直接的功能；例如，QWidget有一个font属性，但从不自己使用。有很多子类来提供这些功能。Qlabel, QPushButton, QListWidget, QTabWidget.
			
